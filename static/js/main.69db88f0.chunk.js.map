{"version":3,"sources":["types.ts","utils/utils.ts","utils/queue.ts","store/Cell.ts","store/GameField.ts","context.ts","store/Root.ts","scenes/game/Cell.tsx","scenes/game/GameField.tsx","scenes/game/Header.tsx","scenes/menu/validation.ts","scenes/menu/Menu.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GameState","CellStatus","coordsToIdx","x","y","width","getRandomInt","min","max","Math","floor","random","getNearby","idx","height","maxX","maxY","res","push","CircularQueue","k","queue","size","frontIdx","backIdx","this","value","isFull","isEmpty","undefined","rearIdx","Cell","status","INITIAL","hasBomb","makeObservable","observable","open","action","OPEN","canFlag","FLAGGED","GameField","bombsTotal","onWin","onLoose","randomNumberGenerator","cells","cellsToOpen","cellsLeftToPlaceBombs","bombsToPlace","flagsPlaced","index","cell","getCell","shouldHaveBomb","isOpeningRecursively","flagsLeft","computed","toggleFlag","openCell","reduce","prev","current","getValue","result","enQueue","openRecursive","counter","front","deQueue","forEach","Promise","resolve","setTimeout","rootStore","state","MENU","gameField","resetGame","PLAYING","handleWin","handleLoose","WON","LOST","startGame","values","bombs","RootContext","React","createContext","cn","createCn","observer","columnIndex","rowIndex","style","useContext","field","cellStatus","getCellByCoords","useMemo","getValueByCoords","className","onMouseDown","e","button","onContextMenu","preventDefault","columnCount","columnWidth","rowCount","rowHeight","Header","onClick","isNumber","test","minValue","maxValue","validationRules","Number","validationErrors","Menu","onStartGame","useState","setWidth","setHeight","setBombs","setValidationErrors","onSubmit","Object","keys","errors","fieldName","some","rule","validate","length","type","onChange","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"gPAAYA,EAIAC,E,4GCJL,SAASC,EAAYC,EAAWC,EAAWC,GAC9C,OAAOD,EAAIC,EAAQF,EAGhB,SAASG,EAAT,GAA+D,IAAxCC,EAAuC,EAAvCA,IAAKC,EAAkC,EAAlCA,IAC/B,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGlD,SAASK,EAAUC,EAAaR,EAAeS,GAClD,IAAMV,EAAIK,KAAKC,MAAMG,EAAMR,GACrBF,EAAIU,EAAMT,EAAIC,EACdU,EAAOV,EAAQ,EACfW,EAAOF,EAAS,EAEhBG,EAAgB,GAyBtB,OAxBIb,EAAI,GAAKD,EAAI,GACbc,EAAIC,KAAKhB,EAAYC,EAAE,EAAGC,EAAE,EAAGC,IAE/BD,EAAI,GACJa,EAAIC,KAAKhB,EAAYC,EAAGC,EAAE,EAAGC,IAE7BD,EAAI,GAAKD,EAAIY,GACbE,EAAIC,KAAKhB,EAAYC,EAAE,EAAGC,EAAE,EAAGC,IAE/BF,EAAI,GACJc,EAAIC,KAAKhB,EAAYC,EAAE,EAAGC,EAAGC,IAE7BF,EAAIY,GACJE,EAAIC,KAAKhB,EAAYC,EAAE,EAAGC,EAAGC,IAE7BD,EAAIY,GAAQb,EAAI,GAChBc,EAAIC,KAAKhB,EAAYC,EAAE,EAAGC,EAAE,EAAGC,IAE/BD,EAAIY,GACJC,EAAIC,KAAKhB,EAAYC,EAAGC,EAAE,EAAGC,IAE7BD,EAAIY,GAAQb,EAAIY,GAChBE,EAAIC,KAAKhB,EAAYC,EAAE,EAAGC,EAAE,EAAGC,IAE5BY,G,SDvCCjB,O,eAAAA,I,qBAAAA,I,aAAAA,I,gBAAAA,M,cAIAC,O,qBAAAA,I,eAAAA,I,sBAAAA,M,KEDL,IAAMkB,EAAb,WAMI,WAAYC,GAAY,yBALxBC,MAA4B,GAKL,KAJvBC,UAIuB,OAHvBC,cAGuB,OAFvBC,aAEuB,EACnBC,KAAKH,KAAOF,EACZK,KAAKF,SAAWH,EAAI,EACpBK,KAAKD,QAAUJ,EAAI,EAT3B,2CAYI,SAAQM,GACJ,OAAID,KAAKE,WAGTF,KAAKJ,MAAMI,KAAKD,SAAWE,EAC3BD,KAAKD,SAAW,GACM,IAAlBC,KAAKD,UACLC,KAAKD,SAAWC,KAAKH,OAElB,KArBf,qBAwBI,WACI,OAAIG,KAAKG,YAGTH,KAAKJ,MAAMI,KAAKF,eAAYM,EAC5BJ,KAAKF,UAAY,GACM,IAAnBE,KAAKF,WACLE,KAAKF,UAAYE,KAAKH,OAEnB,KAjCf,mBAoCI,WACI,IAAMI,EAAQD,KAAKJ,MAAMI,KAAKF,UAC9B,YAAiBM,IAAVH,GAAuB,EAAIA,IAtC1C,kBAyCI,WACI,IAAII,EAAUL,KAAKD,QAAU,EACzBM,IAAYL,KAAKH,OACjBQ,GAAWL,KAAKH,MAEpB,IAAMI,EAAQD,KAAKJ,MAAMS,GACzB,YAAiBD,IAAVH,GAAuB,EAAIA,IA/C1C,qBAkDI,WACI,OAAQD,KAAKF,WAAaE,KAAKD,cAAyCK,IAA9BJ,KAAKJ,MAAMI,KAAKF,YAnDlE,oBAsDI,WACI,OAAQE,KAAKF,WAAaE,KAAKD,cAAyCK,IAA9BJ,KAAKJ,MAAMI,KAAKF,cAvDlE,KCCaQ,EAAb,WAKI,aAAe,yBAJfC,OAAS/B,EAAWgC,QAIN,KAFdC,aAEc,EACVC,YAAeV,KAAM,CACjBO,OAAQI,IACRC,KAAMC,MARlB,wCAYI,WACIb,KAAKO,OAAS/B,EAAWsC,OAbjC,wBAgBI,SAAWC,GACP,OAAIA,GAAWf,KAAKO,SAAW/B,EAAWgC,SACtCR,KAAKO,OAAS/B,EAAWwC,QAClB,GAEPhB,KAAKO,SAAW/B,EAAWwC,SAC3BhB,KAAKO,OAAS/B,EAAWgC,SACjB,GAEL,MAzBf,KCKaS,EAAb,WAgBI,WACWrC,EACAS,EACA6B,EACCC,EACAC,GAET,IAAD,OADUC,EACV,uDADgFxC,EAChF,yBANSD,QAMT,KALSS,SAKT,KAJS6B,aAIT,KAHUC,QAGV,KAFUC,UAEV,KADUC,wBACV,KAtBMC,WAsBN,OAnBFC,iBAmBE,OAhBMC,2BAgBN,OAfMC,kBAeN,OAbFC,YAAc,EAaZ,KA0CFjB,QAAU,SAACkB,GACP,IAAMC,EAAO,EAAKC,QAAQF,GAI1B,YAHqBvB,IAAjBwB,EAAKnB,UACLmB,EAAKnB,QAAU,EAAKqB,kBAEjBF,EAAKnB,SA/Cd,KA8EMb,MAAQ,IAAIF,EAAsBM,KAAKpB,MAAQoB,KAAKX,QA9E1D,KA+FM0C,sBAAuB,EA9F3B/B,KAAKsB,MAAQ,GACbtB,KAAKwB,sBAAwBxB,KAAKpB,MAAQoB,KAAKX,OAC/CW,KAAKuB,YAAcvB,KAAKpB,MAAQoB,KAAKX,OAASW,KAAKkB,WACnDlB,KAAKyB,aAAezB,KAAKkB,WACzBR,YAAeV,KAAM,CACjBuB,YAAaZ,IACbe,YAAaf,IACbqB,UAAWC,IACXC,WAAYrB,IACZsB,SAAUtB,MAjCtB,2CAYI,WACI,OAAOb,KAAKkB,WAAalB,KAAK0B,cAbtC,qBAqCI,SAAQC,GACJ,IAAK3B,KAAKsB,MAAMK,GAAQ,CACpB,IAAMC,EAAO,IAAItB,EAEjB,OADAN,KAAKsB,MAAMK,GAASC,EACbA,EAEX,OAAO5B,KAAKsB,MAAMK,KA3C1B,6BA8CI,SAAgBjD,EAAWC,GACvB,IAAMgD,EAAQlD,EAAYC,EAAGC,EAAGqB,KAAKpB,OACrC,OAAOoB,KAAK6B,QAAQF,KAhD5B,wBAmDI,SAAWjD,EAAWC,GAClB,IAAMgD,EAAQlD,EAAYC,EAAGC,EAAGqB,KAAKpB,OAC/BgD,EAAO5B,KAAKsB,MAAMK,GACxB3B,KAAK0B,aAAeE,EAAKM,WAAWlC,KAAK0B,YAAc1B,KAAKkB,cAtDpE,sBAyDI,SAASU,GACLA,EAAKhB,OACLZ,KAAKuB,aAAe,EACK,IAArBvB,KAAKuB,aACLvB,KAAKmB,UA7DjB,sBAyEI,SAASQ,GACL,OAAI3B,KAAKS,QAAQkB,IA5EL,GHmCavC,EG4CDuC,EH5Cc/C,EG4CPoB,KAAKpB,MH5CiBS,EG4CVW,KAAKX,OH5CqBoB,EG4CbT,KAAKS,QH3C1DtB,EAAUC,EAAKR,EAAOS,GAAQ+C,QACjC,SAACC,EAAMC,GAAP,OAAmBD,GAAQ5B,EAAQ6B,GAAW,EAAI,KAClD,IAHD,IAA0BlD,EAAaR,EAAeS,EAAgBoB,IGjC7E,8BAgFI,SAAiB/B,EAAWC,GACxB,IAAMgD,EAAQlD,EAAYC,EAAGC,EAAGqB,KAAKpB,OACrC,OAAOoB,KAAKuC,SAASZ,KAlF7B,4BAqFI,WAEI,GAAI3B,KAAKwB,wBAA0BxB,KAAKpB,MAAQoB,KAAKX,OAEjD,OADAW,KAAKwB,uBAAyB,GACvB,EAGX,IACMgB,EADMxC,KAAKqB,sBAAsB,CAACvC,IAAK,EAAGC,IAAKiB,KAAKwB,yBACpCxB,KAAKyB,aAK3B,OAJIe,IACAxC,KAAKyB,cAAgB,GAEzBzB,KAAKwB,uBAAyB,EACvBgB,IAlGf,kBAuGI,SAAK9D,EAAWC,GACZ,IAAMgD,EAAQhD,EAAIqB,KAAKpB,MAAQF,EACzBkD,EAAO5B,KAAKsB,MAAMK,GACxB3B,KAAKmC,SAASP,GACd,IAAM3B,EAAQD,KAAKuC,SAASZ,IA7GhB,IA8GR1B,GACAD,KAAKoB,UAEK,IAAVnB,IAGJD,KAAKJ,MAAM6C,QAAQd,GACnB3B,KAAK0C,mBAnHb,kEAwHI,iGACQ1C,KAAK+B,qBADb,iDAII/B,KAAK+B,sBAAuB,EACxBY,EAAU,EALlB,WAMmC,IAAxB3C,KAAKJ,MAAMgD,QANtB,oBAOQD,GAAW,EACLhB,EAAQ3B,KAAKJ,MAAMgD,QACzB5C,KAAKJ,MAAMiD,UAEX1D,EAAUwC,EAAO3B,KAAKpB,MAAOoB,KAAKX,QAC7ByD,SAAQ,SAACnB,GACN,IAAMC,EAAO,EAAKN,MAAMK,GACpBC,EAAKrB,SAAW/B,EAAWgC,UAC3B,EAAK2B,SAASP,GACe,IAAzB,EAAKW,SAASZ,IACd,EAAK/B,MAAM6C,QAAQd,OAInB,MAAZgB,EArBZ,wBAsBYA,EAAU,EAtBtB,UAuBkB,IAAII,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAS,MAvB7D,+BA0BIhD,KAAK+B,sBAAuB,EA1BhC,iDAxHJ,6DCLamB,EAAY,ICKrB,aAAe,IAAD,gCAHdC,MAAmB5E,EAAU6E,KAGf,KAFdC,eAEc,OAWdC,UAAY,WAAO,IAAD,EACsB,EAAKD,UAAlCzE,EADO,EACPA,MAAOS,EADA,EACAA,OAAQ6B,EADR,EACQA,WACtB,EAAKiC,MAAQ5E,EAAUgF,QACvB,EAAKF,UAAY,IAAIpC,EAAUrC,EAAOS,EAAQ6B,EAAY,EAAKsC,UAAW,EAAKC,cAdrE,KAiBdD,UAAY,WACJ,EAAKL,QAAU5E,EAAUgF,UACzB,EAAKJ,MAAQ5E,EAAUmF,MAnBjB,KAuBdD,YAAc,WACV,EAAKN,MAAQ5E,EAAUoF,MAxBb,KA2BdC,UAAY,SACRC,GAMA,EAAKV,MAAQ5E,EAAUgF,QACvB,EAAKF,UAAY,IAAIpC,EAAU4C,EAAOjF,MAAOiF,EAAOxE,OAAQwE,EAAOC,MAAO,EAAKN,UAAW,EAAKC,cAlC/F/C,YAAeV,KAAM,CACjBmD,MAAOxC,IACP0C,UAAW1C,IACXiD,UAAW/C,IACXyC,UAAWzC,IACX2C,UAAW3C,IACX4C,YAAa5C,ODXZkD,EAAcC,IAAMC,cAAcf,G,eEQzCgB,EAAKC,aAAS,QAEP7D,EAA0C8D,aAAS,YAAuC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MAChFrB,EAAYc,IAAMQ,WAAWT,GAC5BZ,EAASD,EAATC,MACDsB,EAAQvB,EAAUG,UAGlBqB,EADOD,EAAME,gBAAgBN,EAAaC,GACxB/D,OAElBN,EAAQ+D,IAAMY,SAAQ,WACxB,GAAIF,IAAelG,EAAWsC,MAAQqC,IAAU5E,EAAUoF,KAG1D,OAAOc,EAAMI,iBAAiBR,EAAaC,KAC5C,CAACD,EAAaC,EAAUG,EAAOC,EAAYvB,IAgB9C,OACI,qBACI2B,UAAWZ,EAAG,CAACjE,QAAOM,OAAQmE,IAC9BH,MAAOA,EACPQ,YAlBR,SAAyBC,GACrB,GAAI7B,IAAU5E,EAAUgF,QAGxB,GAvBkB,IAuBdyB,EAAEC,OAONR,EAAMvC,WAAWmC,EAAaC,OAP9B,CACI,GAAII,IAAelG,EAAWgC,QAC1B,OAEJiE,EAAM7D,KAAKyD,EAAaC,KAWxBY,cAAe,SAACF,GAAOA,EAAEG,kBAJ7B,UHtCY,IG4CPlF,GAA4B,IAAVA,GAAeA,OCzCxCiE,G,MAAKC,aAAS,eAEPlD,EAAsBmD,aAAS,WACxC,IAD8C,EAC5BJ,IAAMQ,WAAWT,GACDV,UAA3BzE,EAFuC,EAEvCA,MAAOS,EAFgC,EAEhCA,OAEd,OACI,cAAC,IAAD,CACIyF,UAAWZ,IACXkB,YAAaxG,EACbyG,YAAa,GACbhG,OAAQ,IACRiG,SAAUjG,EACVkG,UAAW,GACX3G,MAAO,KAPX,SASK0B,OCjBP4D,G,MAAKC,aAAS,WAEPqB,EAAmBpB,aAAS,WACrC,IAAMlB,EAAYc,IAAMQ,WAAWT,GAC5BZ,EAASD,EAATC,MAFoC,EAGVD,EAAUG,UAApCrB,EAHoC,EAGpCA,UAAWT,EAHyB,EAGzBA,YAElB,OACI,sBAAKuD,UAAWZ,IAAhB,UACI,sBAAKY,UAAWZ,EAAG,SAAnB,UACI,+CAAkBlC,KAClB,kDAAqBT,QAEzB,8BACI,wBAAQkE,QAASvC,EAAUI,UAA3B,SACKH,IAAU5E,EAAUmF,IAAM,eAAOP,IAAU5E,EAAUoF,KAAO,eAAO,yB,OCxBlF+B,EAAW,SAACzF,GAAD,MAAmB,QAAQ0F,KAAK1F,IAE3CnB,EAAM,SAAC8G,GAAD,OAAsB,SAAC3F,GAAD,OAAoBA,GAAS2F,IACzD7G,EAAM,SAAC8G,GAAD,OAAsB,SAAC5F,GAAD,OAAoBA,GAAS4F,IAUzDC,EAAkE,CACpElH,MAAO,CAAC8G,EAAU5G,EAAI,GAAIC,EAAI,MAC9BM,OAAQ,CAACqG,EAAU5G,EAAI,GAAIC,EAAI,MAC/B+E,MAAO,CAAC4B,EAAU5G,EAAI,GAAI,SAACmB,EAAD,OAASrB,EAAT,EAASA,MAAOS,EAAhB,EAAgBA,OAAhB,OAA4BN,EAAIgH,OAAOnH,GAASmH,OAAO1G,GAAU,EAArCN,CAAwCkB,MAK5F+F,EAAqC,CACvCpH,MAAO,yBACPS,OAAQ,yBACRyE,MAAO,gCCjBLI,G,MAAKC,aAAS,SAUP8B,EAAwB,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAC1BC,mBAAS,KADiB,mBAC7CvH,EAD6C,KACtCwH,EADsC,OAExBD,mBAAS,KAFe,mBAE7C9G,EAF6C,KAErCgH,EAFqC,OAG1BF,mBAAS,MAHiB,mBAG7CrC,EAH6C,KAGtCwC,EAHsC,OAIJH,mBAAS,IAJL,mBAI7CH,EAJ6C,KAI3BO,EAJ2B,KAoBpD,OACI,uBAAMC,SAfV,SAAsBxB,GAClBA,EAAEG,iBACF,IACMa,EDCU,SAACnC,GACrB,OAAQ4C,OAAOC,KAAK7C,GACfzB,QAAO,SAACuE,EAAQC,GAKb,OAJiBd,EAAgBc,GAAWC,MAAK,SAAAC,GAAI,OAAKA,EAAKjD,EAAO+C,GAAY/C,QAE9E8C,EAAOC,GAAaZ,EAAiBY,IAElCD,IACR,ICTsBI,CADE,CAACnI,QAAOS,SAAQyE,UAE3CyC,EAAoBP,GACyB,IAAzCS,OAAOC,KAAKV,GAAkBgB,QAC9Bd,EAAY,CACRtH,OAAQA,EACRS,QAASA,EACTyE,OAAQA,KAMhB,UACI,8BAAK,4CACL,uBAAOmD,KAAK,OAAOhH,MAAOrB,EAAOsI,SAAU,SAAClC,GAAD,OAAOoB,EAASpB,EAAEmC,OAAOlH,UACpE,qBAAK6E,UAAWZ,EAAG,SAAnB,SAA8B8B,EAAiBpH,QAE/C,8BAAK,6CACL,uBAAOqI,KAAK,OAAOhH,MAAOZ,EAAQ6H,SAAU,SAAClC,GAAD,OAAOqB,EAAUrB,EAAEmC,OAAOlH,UACtE,qBAAK6E,UAAWZ,EAAG,SAAnB,SAA8B8B,EAAiB3G,SAE/C,8BAAK,4CACL,uBAAO4H,KAAK,OAAOhH,MAAO6D,EAAOoD,SAAU,SAAClC,GAAD,OAAOsB,EAAStB,EAAEmC,OAAOlH,UACpE,qBAAK6E,UAAWZ,EAAG,SAAnB,SAA8B8B,EAAiBlC,QAE/C,uBAAOgB,UAAWZ,EAAG,UAAW+C,KAAK,SAAShH,MAAM,kBCvC1DiE,G,MAAKC,aAAS,QAuBLiD,EArBHhD,aAAS,WACjB,IAAMlB,EAAYc,IAAMQ,WAAWT,GAEnC,OACI,sBAAKe,UAAWZ,IAAhB,UACI,kDAEIhB,EAAUC,QAAU5E,EAAU6E,MAC9B,cAAC,EAAD,CAAM8C,YAAahD,EAAUU,YAG7BV,EAAUC,QAAU5E,EAAU6E,MAC9B,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,aCdLiE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACjE,EAAYkE,SAAb,CAAsBhI,MAAOiD,EAA7B,SACE,cAAC,EAAD,QAGJgF,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.69db88f0.chunk.js","sourcesContent":["export enum GameState {\r\n    MENU, PLAYING, WON, LOST\r\n}\r\n\r\nexport enum CellStatus {\r\n    INITIAL, OPEN, FLAGGED\r\n}\r\n","export function coordsToIdx(x: number, y: number, width: number) {\r\n    return y * width + x;\r\n}\r\n\r\nexport function getRandomInt({min, max}: {min: number, max: number}) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getNearby(idx: number, width: number, height: number) {\r\n    const y = Math.floor(idx / width);\r\n    const x = idx - y * width;\r\n    const maxX = width - 1;\r\n    const maxY = height - 1;\r\n\r\n    const res: number[] = [];\r\n    if (y > 0 && x > 0) {\r\n        res.push(coordsToIdx(x-1, y-1, width));\r\n    }\r\n    if (y > 0) {\r\n        res.push(coordsToIdx(x, y-1, width));\r\n    }\r\n    if (y > 0 && x < maxX) {\r\n        res.push(coordsToIdx(x+1, y-1, width));\r\n    }\r\n    if (x > 0) {\r\n        res.push(coordsToIdx(x-1, y, width));\r\n    }\r\n    if (x < maxX) {\r\n        res.push(coordsToIdx(x+1, y, width));\r\n    }\r\n    if (y < maxY && x > 0) {\r\n        res.push(coordsToIdx(x-1, y+1, width));\r\n    }\r\n    if (y < maxY) {\r\n        res.push(coordsToIdx(x, y+1, width));\r\n    }\r\n    if (y < maxY && x < maxX) {\r\n        res.push(coordsToIdx(x+1, y+1, width));\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function countNearbyBombs(idx: number, width: number, height: number, hasBomb: (idx: number) => boolean) {\r\n    return getNearby(idx, width, height).reduce(\r\n        (prev, current) => prev + (hasBomb(current) ? 1 : 0),\r\n        0\r\n    );\r\n}\r\n","// Circular buffer\r\n// Implemented using array\r\n\r\nexport class CircularQueue<T> {\r\n    queue: (T  | undefined)[] = [];\r\n    size;\r\n    frontIdx;\r\n    backIdx;\r\n\r\n    constructor(k: number) {\r\n        this.size = k;\r\n        this.frontIdx = k - 1;\r\n        this.backIdx = k - 1;\r\n    }\r\n\r\n    enQueue(value: T): boolean {\r\n        if (this.isFull()) {\r\n            return false;\r\n        }\r\n        this.queue[this.backIdx] = value;\r\n        this.backIdx -= 1;\r\n        if (this.backIdx === -1) {\r\n            this.backIdx += this.size;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    deQueue(): boolean {\r\n        if (this.isEmpty()) {\r\n            return false;\r\n        }\r\n        this.queue[this.frontIdx] = undefined;\r\n        this.frontIdx -= 1;\r\n        if (this.frontIdx === -1) {\r\n            this.frontIdx += this.size;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    front(): T | -1 {\r\n        const value = this.queue[this.frontIdx]\r\n        return value === undefined ? -1 : value;;\r\n    }\r\n\r\n    rear(): T | -1 {\r\n        let rearIdx = this.backIdx + 1;\r\n        if (rearIdx === this.size) {\r\n            rearIdx -= this.size;\r\n        }\r\n        const value = this.queue[rearIdx]\r\n        return value === undefined ? -1 : value;\r\n    }\r\n\r\n    isEmpty(): boolean {\r\n        return (this.frontIdx === this.backIdx && this.queue[this.frontIdx] === undefined);\r\n    }\r\n\r\n    isFull(): boolean {\r\n        return (this.frontIdx === this.backIdx && this.queue[this.frontIdx] !== undefined);\r\n    }\r\n}\r\n","import { action, makeObservable, observable } from \"mobx\";\r\n\r\nimport { CellStatus } from \"../types\";\r\n\r\nexport class Cell {\r\n    status = CellStatus.INITIAL;\r\n\r\n    hasBomb: boolean | undefined;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            status: observable,\r\n            open: action,\r\n        })\r\n    }\r\n\r\n    open() {\r\n        this.status = CellStatus.OPEN;\r\n    }\r\n\r\n    toggleFlag(canFlag: boolean) {\r\n        if (canFlag && this.status === CellStatus.INITIAL) {\r\n            this.status = CellStatus.FLAGGED;\r\n            return 1;\r\n        }\r\n        if (this.status === CellStatus.FLAGGED) {\r\n            this.status = CellStatus.INITIAL;\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n}\r\n","import { action, computed, makeObservable, observable } from \"mobx\";\r\n\r\nimport { CellStatus } from \"../types\";\r\nimport { getRandomInt, countNearbyBombs, getNearby, coordsToIdx } from \"../utils/utils\";\r\nimport { CircularQueue } from \"../utils/queue\";\r\nimport { Cell } from \"./Cell\";\r\n\r\nexport const BOMB = -1;\r\n\r\nexport class GameField {\r\n    private cells: Cell[];\r\n\r\n    /* To show to user */\r\n    cellsToOpen: number;\r\n\r\n    /* For dynamic field generation */\r\n    private cellsLeftToPlaceBombs: number;\r\n    private bombsToPlace: number;\r\n\r\n    flagsPlaced = 0;\r\n\r\n    get flagsLeft() {\r\n        return this.bombsTotal - this.flagsPlaced;\r\n    }\r\n\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n        public bombsTotal: number,\r\n        private onWin: () => void,\r\n        private onLoose: () => void,\r\n        private randomNumberGenerator: (args: {min: number, max: number}) => number = getRandomInt,\r\n    ) {\r\n        this.cells = [];\r\n        this.cellsLeftToPlaceBombs = this.width * this.height;\r\n        this.cellsToOpen = this.width * this.height - this.bombsTotal;\r\n        this.bombsToPlace = this.bombsTotal;\r\n        makeObservable(this, {\r\n            cellsToOpen: observable,\r\n            flagsPlaced: observable,\r\n            flagsLeft: computed,\r\n            toggleFlag: action,\r\n            openCell: action\r\n        });\r\n    }\r\n\r\n    getCell(index: number) {\r\n        if (!this.cells[index]) {\r\n            const cell = new Cell();\r\n            this.cells[index] = cell;\r\n            return cell;\r\n        }\r\n        return this.cells[index];\r\n    }\r\n\r\n    getCellByCoords(x: number, y: number) {\r\n        const index = coordsToIdx(x, y, this.width);\r\n        return this.getCell(index);\r\n    }\r\n\r\n    toggleFlag(x: number, y: number) {\r\n        const index = coordsToIdx(x, y, this.width);\r\n        const cell = this.cells[index];\r\n        this.flagsPlaced += cell.toggleFlag(this.flagsPlaced < this.bombsTotal);\r\n    }\r\n\r\n    openCell(cell: Cell) {\r\n        cell.open();\r\n        this.cellsToOpen -= 1;\r\n        if (this.cellsToOpen === 0) {\r\n            this.onWin();\r\n        }\r\n    }\r\n\r\n    hasBomb = (index: number) => {\r\n        const cell = this.getCell(index);\r\n        if (cell.hasBomb === undefined) {\r\n            cell.hasBomb = this.shouldHaveBomb();\r\n        }\r\n        return cell.hasBomb;\r\n    }\r\n\r\n    getValue(index: number) {\r\n        if (this.hasBomb(index)) {\r\n            return BOMB;\r\n        }\r\n        return countNearbyBombs(index, this.width, this.height, this.hasBomb);\r\n    }\r\n\r\n    getValueByCoords(x: number, y: number) {\r\n        const index = coordsToIdx(x, y, this.width);\r\n        return this.getValue(index);\r\n    }\r\n\r\n    private shouldHaveBomb() {\r\n        // first time always not bomb\r\n        if (this.cellsLeftToPlaceBombs === this.width * this.height) {\r\n            this.cellsLeftToPlaceBombs -= 1;\r\n            return false;\r\n        }\r\n\r\n        const rnd = this.randomNumberGenerator({min: 1, max: this.cellsLeftToPlaceBombs});\r\n        const result = rnd <= this.bombsToPlace;\r\n        if (result) {\r\n            this.bombsToPlace -= 1;\r\n        }\r\n        this.cellsLeftToPlaceBombs -= 1;\r\n        return result;\r\n    }\r\n\r\n    private queue = new CircularQueue<number>(this.width * this.height);\r\n\r\n    open(x: number, y: number) {\r\n        const index = y * this.width + x;\r\n        const cell = this.cells[index];\r\n        this.openCell(cell);\r\n        const value = this.getValue(index);\r\n        if (value === BOMB) {\r\n            this.onLoose();\r\n        }\r\n        if (value !== 0) {\r\n            return;\r\n        }\r\n        this.queue.enQueue(index);\r\n        this.openRecursive();\r\n    }\r\n\r\n    private isOpeningRecursively = false;\r\n\r\n    private async openRecursive() {\r\n        if (this.isOpeningRecursively) {\r\n            return;\r\n        }\r\n        this.isOpeningRecursively = true;\r\n        let counter = 0;\r\n        while (this.queue.front() !== -1) {\r\n            counter += 1;\r\n            const index = this.queue.front() as number;\r\n            this.queue.deQueue();\r\n\r\n            getNearby(index, this.width, this.height)\r\n                .forEach((index) => {\r\n                    const cell = this.cells[index];\r\n                    if (cell.status === CellStatus.INITIAL) {\r\n                        this.openCell(cell);\r\n                        if (this.getValue(index) === 0) {\r\n                            this.queue.enQueue(index);\r\n                        }\r\n                    }\r\n                });\r\n            if (counter === 100) {\r\n                counter = 0;\r\n                await new Promise(resolve => setTimeout(resolve, 0));\r\n            }\r\n        }\r\n        this.isOpeningRecursively = false;\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { RootStore } from \"./store/Root\";\r\n\r\nexport const rootStore = new RootStore();\r\nexport const RootContext = React.createContext(rootStore);\r\n","import { action, makeObservable, observable } from \"mobx\";\r\n\r\nimport { GameField } from \"./GameField\";\r\nimport { GameState } from '../types';\r\n\r\nexport class RootStore {\r\n    state: GameState = GameState.MENU;\r\n    gameField: GameField | undefined;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            state: observable,\r\n            gameField: observable,\r\n            startGame: action,\r\n            resetGame: action,\r\n            handleWin: action,\r\n            handleLoose: action\r\n        })\r\n    }\r\n\r\n    resetGame = () => {\r\n        const {width, height, bombsTotal} = this.gameField!;\r\n        this.state = GameState.PLAYING\r\n        this.gameField = new GameField(width, height, bombsTotal, this.handleWin, this.handleLoose);\r\n    }\r\n\r\n    handleWin = () => {\r\n        if (this.state === GameState.PLAYING) {\r\n            this.state = GameState.WON;\r\n        } \r\n    }\r\n\r\n    handleLoose = () => {\r\n        this.state = GameState.LOST;\r\n    }\r\n\r\n    startGame = (\r\n        values: {\r\n            width: number;\r\n            height: number;\r\n            bombs: number;\r\n        }\r\n    ) => {\r\n        this.state = GameState.PLAYING;\r\n        this.gameField = new GameField(values.width, values.height, values.bombs, this.handleWin, this.handleLoose);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { GridChildComponentProps } from 'react-window';\r\nimport { cn as createCn } from '@bem-react/classname'\r\n\r\nimport { BOMB } from '../../store/GameField';\r\nimport { CellStatus, GameState } from '../../types';\r\nimport { RootContext } from '../../context';\r\n\r\nimport './Cell.css';\r\n\r\nconst LEFT_MOUSE_BUTTON = 0;\r\n\r\nconst cn = createCn('cell');\r\n\r\nexport const Cell: React.FC<GridChildComponentProps> = observer(({ columnIndex, rowIndex, style }) => {\r\n    const rootStore = React.useContext(RootContext);\r\n    const {state} = rootStore;\r\n    const field = rootStore.gameField!;\r\n\r\n    const cell = field.getCellByCoords(columnIndex, rowIndex);\r\n    const cellStatus = cell.status;\r\n\r\n    const value = React.useMemo(() => {\r\n        if (cellStatus !== CellStatus.OPEN && state !== GameState.LOST) {\r\n            return;\r\n        }\r\n        return field.getValueByCoords(columnIndex, rowIndex);\r\n    }, [columnIndex, rowIndex, field, cellStatus, state]);\r\n\r\n    function handleMouseDown(e: React.MouseEvent) {\r\n        if (state !== GameState.PLAYING) {\r\n            return;\r\n        }\r\n        if (e.button === LEFT_MOUSE_BUTTON) {\r\n            if (cellStatus !== CellStatus.INITIAL) {\r\n                return;\r\n            }\r\n            field.open(columnIndex, rowIndex);\r\n            return;\r\n        }\r\n        field.toggleFlag(columnIndex, rowIndex);\r\n    }\r\n  \r\n    return (\r\n        <div\r\n            className={cn({value, status: cellStatus})}\r\n            style={style}\r\n            onMouseDown={handleMouseDown}\r\n            onContextMenu={(e) => {e.preventDefault();}}\r\n        >\r\n            {value !== BOMB && value !== 0 && value}\r\n        </div>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { FixedSizeGrid as Grid } from 'react-window';\r\nimport { cn as createCn } from '@bem-react/classname'\r\n\r\nimport { RootContext } from '../../context';\r\nimport { Cell } from './Cell';\r\n\r\nimport './GameField.css';\r\n\r\nconst cn = createCn('game-field');\r\n\r\nexport const GameField: React.FC = observer(() => {\r\n    const rootStore = React.useContext(RootContext);\r\n    const {width, height} = rootStore.gameField!;\r\n    \r\n    return (\r\n        <Grid\r\n            className={cn()}\r\n            columnCount={width}\r\n            columnWidth={16}\r\n            height={600}\r\n            rowCount={height}\r\n            rowHeight={16}\r\n            width={1024}\r\n        >\r\n            {Cell}\r\n        </Grid>\r\n    );\r\n});\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { cn as createCn } from '@bem-react/classname'\r\n\r\nimport { RootContext } from '../../context';\r\nimport { GameState } from '../../types';\r\n\r\nimport './Header.css';\r\n\r\nconst cn = createCn('header');\r\n\r\nexport const Header: React.FC = observer(() => {\r\n    const rootStore = React.useContext(RootContext);\r\n    const {state} = rootStore;\r\n    const {flagsLeft, cellsToOpen} = rootStore.gameField!;\r\n\r\n    return (\r\n        <div className={cn()}>\r\n            <div className={cn('stats')}>\r\n                <div>Flags left: {flagsLeft}</div>\r\n                <div>Cells to open: {cellsToOpen}</div>\r\n            </div>\r\n            <div>\r\n                <button onClick={rootStore.resetGame}>\r\n                    {state === GameState.WON ? '😎' : state === GameState.LOST ? '☹️' : '🙂'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\n","const isNumber = (value: string) => /^\\d+$/.test(value);\r\n\r\nconst min = (minValue: number) => (value: string) => +value >= minValue;\r\nconst max = (maxValue: number) => (value: string) => +value <= maxValue;\r\n\r\nexport interface FormValues {\r\n    width: string;\r\n    height: string;\r\n    bombs: string;\r\n}\r\n\r\ntype ValidationFunction = (value: string, values: FormValues) => boolean;\r\n\r\nconst validationRules: Record<keyof FormValues, ValidationFunction[]> = {\r\n    width: [isNumber, min(1), max(10000)],\r\n    height: [isNumber, min(1), max(10000)],\r\n    bombs: [isNumber, min(1), (value, {width, height}) => max(Number(width) * Number(height) - 1)(value)]\r\n};\r\n\r\nexport type ValidationErrors = Record<keyof FormValues, string>;\r\n\r\nconst validationErrors: ValidationErrors = {\r\n    width: 'Number from 1 to 10000',\r\n    height: 'Number from 1 to 10000',\r\n    bombs: 'Number from 1 to (cells - 1)'\r\n};\r\n\r\nexport const validate = (values: FormValues): ValidationErrors => {\r\n    return (Object.keys(values) as (keyof FormValues)[])\r\n        .reduce((errors, fieldName) => {\r\n            const hasError = validationRules[fieldName].some(rule => !rule(values[fieldName], values));\r\n            if (hasError) {\r\n                errors[fieldName] = validationErrors[fieldName];\r\n            }\r\n            return errors;\r\n        }, {} as ValidationErrors);\r\n}","import React, { useState } from 'react';\r\nimport {validate, ValidationErrors, FormValues} from './validation';\r\n\r\nimport { cn as createCn } from '@bem-react/classname'\r\n\r\nimport './Menu.css';\r\n\r\nconst cn = createCn('menu');\r\n\r\ninterface Props {\r\n    onStartGame(args: {\r\n        width: number;\r\n        height: number;\r\n        bombs: number;\r\n    }): void;\r\n}\r\n\r\nexport const Menu: React.FC<Props> = ({onStartGame}) => {\r\n    const [width, setWidth] = useState('9');\r\n    const [height, setHeight] = useState('9');\r\n    const [bombs, setBombs] = useState('10');\r\n    const [validationErrors, setValidationErrors] = useState({} as ValidationErrors);\r\n\r\n    function handleSubmit(e: React.FormEvent) {\r\n        e.preventDefault();\r\n        const values: FormValues = {width, height, bombs};\r\n        const validationErrors = validate(values);\r\n        setValidationErrors(validationErrors);\r\n        if (Object.keys(validationErrors).length === 0) {\r\n            onStartGame({\r\n                width: +width,\r\n                height: +height,\r\n                bombs: +bombs\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><label>Width</label></div>\r\n            <input type=\"text\" value={width} onChange={(e) => setWidth(e.target.value)} />\r\n            <div className={cn('error')}>{validationErrors.width}</div>\r\n\r\n            <div><label>Height</label></div>\r\n            <input type=\"text\" value={height} onChange={(e) => setHeight(e.target.value)} />\r\n            <div className={cn('error')}>{validationErrors.height}</div>\r\n\r\n            <div><label>Bombs</label></div>\r\n            <input type=\"text\" value={bombs} onChange={(e) => setBombs(e.target.value)} />\r\n            <div className={cn('error')}>{validationErrors.bombs}</div>\r\n\r\n            <input className={cn('submit')} type=\"submit\" value=\"Let's go!\" />\r\n        </form>\r\n    );\r\n};\r\n","import React from 'react';\nimport { cn as createCn } from '@bem-react/classname'\nimport { observer } from 'mobx-react-lite';\n\nimport { GameField } from './scenes/game/GameField';\nimport { Header } from './scenes/game/Header';\nimport { Menu } from './scenes/menu/Menu';\nimport { RootContext } from './context';\nimport { GameState } from './types';\n\nimport './App.css';\n\nconst cn = createCn('app');\n\nconst App = observer(() => {\n    const rootStore = React.useContext(RootContext);\n\n    return (\n        <div className={cn()}>\n            <h1>HUGE Minesweeper</h1>\n            {\n                rootStore.state === GameState.MENU &&\n                <Menu onStartGame={rootStore.startGame} />\n            }\n            {\n                rootStore.state !== GameState.MENU &&\n                <>\n                    <Header />\n                    <GameField />\n                </>\n            }\n        </div>\n    );\n});\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RootContext, rootStore } from './context';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <RootContext.Provider value={rootStore}>\n      <App />\n    </RootContext.Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}